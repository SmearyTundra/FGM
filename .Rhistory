p <- 40
method <- "Peterson"
sparsity <- 0.3
S0 <- 96
type <- 3
KG_sim <- function(method, p, sparsity, S0, type) {
if(method == 'Bernoulli') {
set.seed(S0)
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
return(list_G_K)
}
if(method == 'Peterson') {
if( p%%4 != 0)
stop('p should be multiple of 4')
string <- paste0('Peterson_p',p)
data(list = string); list_G_K <- get(string); rm(list=string)
if(type == 1)
return(list_G_K$`1`)
if(type == 2)
return(list_G_K$`2`)
if(type == 3)
return(list_G_K$`3`)
if(type == 4)
return(list_G_K$`4`)
} else
stop("Method does not match")
}
KG_sim(method, p, sparsity, S0, type = )
string <- paste0('Peterson_p',p)
data(list = string); list_G_K <- get(string); rm(list=string)
#' @export
KG_sim <- function(method, p, sparsity, S0, type) {
if(method == 'Bernoulli') {
set.seed(S0)
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
return(list_G_K)
}
if(method == 'Peterson') {
if( p%%4 != 0)
stop('p should be multiple of 4')
string <- paste0('Peterson_p',p)
data(list = string); list_G_K <- get(string); #rm(list=string)
if(type == 1)
return(list_G_K$`1`)
if(type == 2)
return(list_G_K$`2`)
if(type == 3)
return(list_G_K$`3`)
if(type == 4)
return(list_G_K$`4`)
} else
stop("Method does not match")
}
KG_sim(method, p, sparsity, S0, type = )
KG_sim(method, p, sparsity, S0, type = 4)
#' @export
KG_sim <- function(method, p, sparsity, S0, type) {
if(method == 'Bernoulli') {
set.seed(S0)
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
return(list_G_K)
}
if(method == 'Peterson') {
if( p%%4 != 0)
stop('p should be multiple of 4')
string <- paste0('Peterson_p',p)
data(list = string); list_G_K <- get(string);
if(type == 1)
return(list_G_K$`1`)
if(type == 2)
return(list_G_K$`2`)
if(type == 3)
return(list_G_K$`3`)
if(type == 4)
return(list_G_K$`4`)
} else
stop("Method does not match")
}
KG_sim(method, p, sparsity, S0, type)
devtools::document()
devtools::install()
rm(list=ls())
library(CCG)
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::build()
load("/home/m_gianella/OneDrive/Bayesian Statistics - Project/PACCHETTO PER TEO/Peterson_p40_new.Rdat")
usethis::use_data(Peterson_p40)
devtools::document()
devtools::install()
library(CCG)
data("data/Peterson_p40.rda")
data("Peterson_p40")
force(Peterson_p40)
rm(list=ls())
data("purees")
kem
purees[3,1]
rm(list=ls())
data(CCG::Peterson_p16)
data("Peterson_p16")
rm(list=ls())
library(CCG)
devtools::document()
devtools::install()
library(CCG)
data("purees")
data("cars")
data("Peterson_p16")
rm(list=ls())
detach("package:CCG", unload = TRUE)
View(CCG::select_posterior_model0)
devtools::build()
q()
library(fda)
data("CanadianWeather")
CanadianWeather$place
CanadianWeather$dailyAv
CanadianWeather$coordinates
CanadianWeather$province
CanadianWeather$region
CanadianWeather$monthlyTemp
CanadianWeather$monthlyPrecip
rm(list=ls())
data("purees")
wavelengths <- as.numeric(stringr::str_remove_all(names(data_tot[,-1]), "X"))
wavelengths <- as.numeric(stringr::str_remove_all(names(purees[,-1]), "X"))
wavelengths
names(purees)
new_names <- names(purees)
new_names <- stringr::str_replace_all(new_names, "X", "W_")
purees2 <- list()
purees2[[1]] <- purees
names(purees2[[1]]) <- new_names
purees2[[2]] <- wavelengths
names(purees2) <- c("data", "wavelengths")
purees2$data
purees2$wavelengths
save(purees2, file = "purees2.Rdat")
rm(list=ls())
BDgraph::bdgraph.sim(p = p, graph = "random")
BDgraph::bdgraph.sim(p = 40, graph = "random")
temp <- BDgraph::bdgraph.sim(p = 40, graph = "random")
is(temp)
temp$G
dims <- c(n,r,p)
dims <- c(351,235,40)
names(dims) <- c("n", "r", "p")
dims
rm(list='dims')
mu_true <- BDgraph::rmvnorm(n = 1, mean = rep(0, p), sigma = 0.001*diag(p))
p <- 20
mu_true <- BDgraph::rmvnorm(n = 1, mean = rep(0, p), sigma = 0.001*diag(p))
mu_true
mu_true <- as.numeric(BDgraph::rmvnorm(n = 1, mean = rep(0, p), sigma = 0.001*diag(p)))
mu_true
rm(list=ls())
q()
devtools::document()
devtools::build()
usethis::use_dev_package("fda")
devtools::document()
devtools::build()
q()
devtools::install()
library(BDgraph)
library(CCG)
#source("../UTILITIES/data_simulation.R")
numero_simulazioni <- 2
S0 <- 96
p <- 40
n <- 200
dati_simulati <- FGM_sim(S0, p, n, "Bernoulli", sparsity = 0.3, type = 1)
set.seed(S0)
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
sparsity <- 0.3
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
temp <- create_structure(n = n, p = p)
tau_eps_true <- 100
set.seed(S0)
mu_true <- as.numeric(BDgraph::rmvnorm(n = 1, mean = rep(0, p), sigma = 0.001*diag(p)))
list_G_K <- KG_sim(method, p, sparsity, S0, type)
G_true <- list_G_K$G
#' @export
KG_sim <- function(method, p, sparsity, S0, type) {
if(method == 'Bernoulli') {
set.seed(S0)
G_true <- BDgraph::bdgraph.sim(p = p, graph = "random", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
return(list_G_K)
}
if(method == 'Cluster') {
set.seed(S0)
G_true <- bdgraph.sim(p = p, graph = "cluster", n = 1, prob = sparsity)$G
G_true <- str2adj(p, adj2str(G_true))
set.seed(S0)
K_true <- BDgraph::rgwish(adj = G_true, b = 4)
list_G_K <- list()
list_G_K[[1]] <- G_true
set.seed(S0)
K_true <- rgwish(adj = G_true, b = 4)
list_G_K[[2]] <- K_true
names(list_G_K) <- c('G', 'K')
return(list_G_K)
}
if(method == 'Peterson') {
if( p%%4 != 0)
stop('p should be multiple of 4')
string <- paste0('Peterson_p',p)
data(list = string); list_G_K <- get(string);
if(type == 1)
return(list_G_K$`1`)
if(type == 2)
return(list_G_K$`2`)
if(type == 3)
return(list_G_K$`3`)
if(type == 4)
return(list_G_K$`4`)
} else
stop("Method does not match")
}
list_G_K <- KG_sim(method, p, sparsity, S0, type)
method <- "Bernoulli"
list_G_K <- KG_sim(method, p, sparsity, S0, type)
G_true <- list_G_K$G
K_true <- list_G_K$K
beta_true <- matrix(0, nrow = n, ncol = p)
data <- matrix(0, nrow = n, ncol = temp$r)
K_inv <- solve(K_true)
set.seed(S0 + i)
beta_true[i, ] <- BDgraph::rmvnorm(n = 1, mean = t(mu_true), sigma = K_inv)
i <- 1
set.seed(S0 + i)
beta_true[i, ] <- BDgraph::rmvnorm(n = 1, mean = t(mu_true), sigma = K_inv)
beta_true[i, ] <- BDgraph::rmvnorm(n = 1, mean = mu_true, sigma = K_inv)
rm(list = ls())
library(BDgraph)
library(CCG)
#source("../UTILITIES/data_simulation.R")
numero_simulazioni <- 2
S0 <- 96
p <- 40
n <- 200
dati_simulati <- FGM_sim(S0, p, n, "Bernoulli", sparsity = 0.3, type = 1)
#' @export
FGM_sim <- function(S0, p, n, method, sparsity = 0.3, type = 4) {
temp <- create_structure(n = n, p = p)
tau_eps_true <- 100
set.seed(S0)
mu_true <- as.numeric(BDgraph::rmvnorm(n = 1, mean = rep(0, p), sigma = 0.001*diag(p)))
list_G_K <- KG_sim(method, p, sparsity, S0, type)
G_true <- list_G_K$G
K_true <- list_G_K$K
beta_true <- matrix(0, nrow = n, ncol = p)
data <- matrix(0, nrow = n, ncol = temp$r)
K_inv <- solve(K_true)
for (i in 1:n) {
set.seed(S0 + i)
beta_true[i, ] <- BDgraph::rmvnorm(n = 1, mean = mu_true, sigma = K_inv)
set.seed(S0 + 10*i)
data[i, ] <- BDgraph::rmvnorm(n = 1, mean = temp$basemat %*% beta_true[i, ], sigma = diag(rep(1/tau_eps_true, temp$r)))
}
simulated_data <- list()
simulated_data[[1]] <- data
simulated_data[[2]] <- beta_true
simulated_data[[3]] <- mu_true
simulated_data[[4]] <- tau_eps_true
simulated_data[[5]] <- G_true
simulated_data[[6]] <- K_true
simulated_data[[7]] <- temp
names(simulated_data) <- c('data', 'beta_true', 'mu_true', 'tau_eps_true', 'G_true', 'K_true', 'FGM_structure')
return(simulated_data)
}
library(BDgraph)
library(CCG)
#source("../UTILITIES/data_simulation.R")
numero_simulazioni <- 2
S0 <- 96
p <- 40
n <- 200
dati_simulati <- FGM_sim(S0, p, n, "Bernoulli", sparsity = 0.3, type = 1)
rm(list=ls())
devtools::document()
devtools::document()
devtools::build()
devtools::install()
q()
q()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build
devtools::build()
devtools::install()
q()
devtools::build()
remove.packages("CCG", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
ddevtools::install
devtools::install()
source('~/Documents/Custom Packages in R/FGM/R/objects.R', echo=TRUE)
rm(list=ls())
devtools::document()
devtools::document()
devtoo
devtools::install()
library(CCG)
library(FGM)
load("/home/m_gianella/Documents/Bayesian Statistics/DATA/purees.Rdat")
X.axis <- purees$wavelengths
Y.axis <- purees$data[which(purees$data$Group=="Strawberry"),-1]
fgmobj <- FGM(Y.axis = Y.axis, X.axis = X.axis, basis = "Spline", dim.basis = 40)
fgmobj$dims['p']
fgmobj$dims['p']+3
is(fgmobj$dims)
try(fgmobj$dims['p'])
try(fgmobj$dims['q'])
is.na(fgmobj$dims['p'])
is.na(fgmobj$dims['q'])
fgmobj$dims
devtools::document()
devtools::install()
rm(list=ls())
devtools::document()
load("/home/m_gianella/Documents/Bayesian Statistics/DATA/purees.Rdat")
usethis::use_data(purees)
devtools::document()
devtools::install()
rm(list=ls())
devtools::document()
devtools::install()
devtools::document()
devtools::
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::build()
library(FGM)
devtools::build()
